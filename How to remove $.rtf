{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 How remove \'91$\'92 from your data in Python\
\
Most straightforward but slowest:\
%timeit df.state_bottle_retail.apply(lambda x: x.replace('$',''))\
\
Using .strip instead of .replace, instead of replacing the \'91$\'92 with a blank space, it just takes out the \'91$.\'92:\
%timeit df.state_bottle_retail.apply(lambda x: x.strip('$'))\
\
List comprehensions: very efficient method of iterating over a lot of objects in Python. \
.strip method with a list comprehension instead of .apply method: \
%timeit [x.strip('$') for x in df.state_bottle_retail]\
\
\
Slicing method (Fastest but not as safe): Instead of using a function to pull out the \'91$\'92, use Python built in [] slicing:\
\pard\pardeftab720\sl380\partightenfactor0
\cf0 %timeit [x[1:] for x in df.state_bottle_retail]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
To make any of these changes actually work, you\'92d have to assign the changed values back to the column you are changing in your DataFrame:\
df.state_bottle_retail = [x.strip('$') for x in df.state_bottle_retail]\
\
\
Source:\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://towardsdatascience.com/5-methods-to-remove-the-from-your-data-in-python-and-the-fastest-one-281489382455"}}{\fldrslt 
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://towardsdatascience.com/5-methods-to-remove-the-from-your-data-in-python-and-the-fastest-one-281489382455}}
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 \
\
\
}